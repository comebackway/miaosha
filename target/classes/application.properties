#thymeleaf
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html


#mybatis
mybatis.type-aliases-package=self.lcw01.miaosha.entity,self.lcw01.miaosha.dto
#下划线转换成驼峰
mybatis.configuration.map-underscore-to-camel-case=true
#默认连接数
mybatis.configuration.default-fetch-size=100
#超时时间(3s)
mybatis.configuration.default-statement-timeout=3000
#mybatis配置文件路径
mybatis.mapper-locations=classpath:/miaosha/dao/*.xml


#数据库基本连接配置
spring.datasource.url=jdbc:mysql://120.78.179.101:3316/miaosha?useUnicode=true&characterEncoding=utf8&allowMultiQueries=true&useLegacyDatetimeCode=false&serverTimezone=Asia/Shanghai
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
#druid连接池配置(阿里巴巴出品),该配置一般也是连接池通用配置
spring.datasource.filters=stat
spring.datasource.maxActive=1000
spring.datasource.initialSize=500
# 配置获取连接等待超时的时间
spring.datasource.maxWait=60000
spring.datasource.minldle=500
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
#校验sql 如果不配validationQuery项，则下面三项配置无用。作用优化数据库性能
spring.datasource.validationQuery=SELECT 'x'
#指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.一般开启，也一般只开启这个
spring.datasource.testWhileIdle=true
#借出连接时不要测试，否则很影响性能，一般关闭，默认开启
spring.datasource.testOnBorrow=false
#指明是否在归还到池中前进行检验，会影响性能，一般关闭，默认开启
spring.datasource.testOnReturn=false
# 打开PSCache（游标缓存，避免游标反复创建），并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20



#redis
redis.host=120.78.179.101
redis.port=6379
redis.timeout=3
#redispool
redis.poolMaxTotal=1000
redis.poolMaxIdle=500
redis.poolMaxWait=500


#logger
#logging.level.self.lcw01.miaosha.dao=DEBUG


#配置静态资源的处理模式
#是否使用静态资源配置，默认true
spring.resources.add-mappings=true
#指示客户端缓存的时间
spring.resources.cache.period=7200
#将resolver的chain（链，一层层的）缓存在cache中
spring.resources.chain.cache=true
#启用chain缓存
spring.resources.chain.enabled=true
#启用html5的applicationcache
spring.resources.chain.html-application-cache=true
#静态文件路径
spring.resources.static-locations=classpath:/static/

#rabbitmq
spring.rabbitmq.host=120.78.179.101
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
#rabbitmq里边会虚拟出多个服务 其中每个用户都有自己对应的服务（文件夹路径）
#默认的guest用户只能访问 / 这个文件路径
spring.rabbitmq.virtual-host=/
#listener  消费者的配置
#消费者的数量，也代表并行的数量，数量越大速度越快
#1代表串行 越大队列处理数据的速度就越快
spring.rabbitmq.listener.simple.concurrency=10
spring.rabbitmq.listener.simple.max-concurrency=10
#每个消费者每次取消息的数目,越大处理速度越快，但也不能太大，不然会后边队列等待堆积会越来越严重
spring.rabbitmq.listener.simple.prefetch=1
#自动启动
spring.rabbitmq.listener.simple.auto-startup=true
#如果消息处理失败后重新把消息放回队列
spring.rabbitmq.listener.simple.default-requeue-rejected=true
#template 发送者的配置
#队列满了 消息发不出去 重试
spring.rabbitmq.template.retry.enabled=true
#初始重试发送 每隔1000毫秒重试一次
spring.rabbitmq.template.retry.initial-interval=1000
#下一次重试与上一次重试时间间隔的关系 2倍  1-2-4-8
spring.rabbitmq.template.retry.multiplier=2
#最大的重试间隔时间
spring.rabbitmq.template.retry.max-interval=10000
#一个消息最多重试3次
spring.rabbitmq.template.retry.max-attempts=3

